
1. Lokálna aplikácia

Voľba vhodného jazyka, ktorý by nám čo najefektívnejšie a najlepšie umožňoval implementáciu lokálnej časti aplikácie, nebola úplne triviálna. 
Zvoliť C/C++ ? Javu ? C# ?
Java je v dnešnom svete jeden z najrozšírenejších programovacích jazykov. Rozmýšlali sme, že to spravíme v nej, avšak po 
dlhšom zisťovaní informácii sme zistili, že v Jave sa veľmi zle robí práve so sériovými portmi - čo je jedna z kľúčových 
častí implementácie tejto časti aplikácie. Veľká väčšina frameworkov a knižníc, ktoré dokážu pracovať so sériovým portov, 
sú platené. Našli sme aj nejaké zadarmo, avšak u každej sa vyskytol nejaký problém.
Jedna z nich bola napríklad Java Communication API (JavaComm). Tá však už oficiálne nie je ďalej podporovaná a vyvíjaná 
pre windows, iba pre Solaris SPARC, Solaris x86 a Linux x86. To bol problém, keďže sme potrebovali, aby softvér bežal na 
windowse. Našli sme inú knižnicu - RXTX, ktorá sa dá tiež zadarmo použiť, avšak tá zase nie je úplne vhodná pre niektoré 
Baud rate hodnoty. Našli sme veľa ľudí na mnohých fórach, ktorý mali problém s touto knižnicou práve kvôli tomu, program 
im pri jednoduchej komunkácii buď komunikoval zlé hodnoty alebo hádzal chyby. Nechceli sme sa zaoberať podobnými problémami, 
keďže očividne by to nešlo priveľmi hladko. Java teda v tomto prípade vyšla ako nevýhodná.
Čo C/C++ ? To by mohla byť skvelá možnosť. Mohli by sme využiť všetky sily C++ od jeho efektívnosti cez veľkú kontrolu nad 
pamäťou. Existovali aj knižnice so sériovými portmi, ktoré nevyzerali na pohľad tak komplikovane a "pokazene" ako (zadarmo) 
knižnice predošlej javy. Nastal však iný problém - bolo by potrebné hľadať ďalšie riešenie iného problému - dynamické listovanie 
portov na zariadení, čo je nevyhnutná požiadavka. Na to by bolo potrebné doinštalovať balíky, pridať ďalšie knižnice. Dúfať, že 
to prejde v poriadku a nenarazíme na zbytočné, zdržujúce problémy počas tohto procesu - ešte pred tým než, vlastne začneme niečo 
relevantné robiť a čím dosiahneme výsledky. Musí existovať niečo menej komplikované... 
Bližšie sme sa pozreli na C# a .NET framework. Zistili sme, že oproti Jave sa v ňom oveľa lepšie robí práve so sériovými 
portmi a pristupuje k ďalším iným systémovým vlastnostiam daného počítača, kde bol zase problém s C++. 
Súčasťou .NET je totiž namespace System.Management, ktorý poskytuje prístup k množstvu informacii, správám, udalostiam systému, zariadeniam
 a aplikáciam registrovaných v infraštruktúre Windows Management Instrumentation (WMI). Aplikácie a servisy sa vedia systému pýtať 
na zaujímavé informácie (množstvo voľného miesta na disku, aktuálne využitie procesoru, ku ktorej databáze je pripojená určitá aplikácia a pod),
 pomocou triedy oddedenej z ManagementObjectSearcher a ManagementQuery, alebo zachytávať udalosti správy pomocou ManagementEventWatcher triedy.
 Okrem toho má .NET samozrejme zabudovanú prácu so sériovým portovm, ktorá je na prvý pohľad intuitívna, 
 podľa diskusných fór vcelku dobre funguje a samozrejme, keďže C# je od Microsoftu, pod Windowsom funguje 
 presne ako má, čo potrebujeme. 
 Keďže zo zadania projektu nepotrebujeme softvér vyvíjať aj na Linuxy, požiadavka bola len pre Windows,
 prakticky neexistuje dôvod, prečo po tomto všetkom nevybrať C#.

2. Komunikácia

2.1 Dynamické selektovanie sériového portu

Aplikácia vie dynamicky selektovať sériové porty na danom zariadení. Využíva na to už horespomínaný namespace System.Management, resp. WMI triedu
zvanú Win32_PnPEntinty, ktorá v sebe uchováva vlastnosti všetkých prítomných Plug and Play zariadení. Pomocou tejto triedy aplikácia pri spustení
robí query a vyberá všetky sériové porty, ktoré sú v zariadení zaevidované. Z tých si používateľ vie v gafickom rozhraní vybrať a pripájať sa na ne.

2.2 Šifrovanie
Prenos komunikácie je šifrovaný pomocou SSL na sprostredkovanie bezpečnej komunikácie ako s aplikáciou a databázou, tak aj aplikáciou a webom.

3. Web
Webová aplikácia bude naprogramovaná v jazyku PHP s použitím Bootstrapu a JavaScriptu
na zobrazovanie grafov s RealTime zobrazovaním dát
pretože: 
a) Stránka by mala byť dynamická a teda nestačí len čisté HTML a CSS
b) Stránka by mala byť responzívna a teda mala by sa vhodne zobrazovať na ľubovolnom zariadení s ĺubovolným rozlíšením
c) Stránka by sa mala aj bez opätovného načítania vedieť aktualizovať